import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';

export interface User {
  id: string;
  email: string;
  name: string;
  role: 'admin' | 'engineer' | 'maintenance' | 'compliance' | 'management';
  department: string;
  permissions: string[];
  avatar?: string;
  lastLogin?: string;
}

export interface AuthState {
  user: User | null;
  token: string | null;
  isAuthenticated: boolean;
  loading: boolean;
  error: string | null;
}

const initialState: AuthState = {
  user: null,
  token: null,
  isAuthenticated: false,
  loading: false,
  error: null,
};

// Authentication with backend API
export const loginAsync = createAsyncThunk(
  'auth/login',
  async ({ email, password }: { email: string; password: string }) => {
    try {
      const response = await fetch('http://localhost:8000/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: new URLSearchParams({
          username: email,
          password: password,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.detail || 'Login failed');
      }

      const { access_token } = await response.json();

      // Get user details
      const userResponse = await fetch('http://localhost:8000/api/me', {
        headers: {
          'Authorization': `Bearer ${access_token}`
        }
      });

      if (!userResponse.ok) {
        throw new Error('Failed to get user details');
      }

      const userData = await userResponse.json();
      return {
        user: {
          id: userData.id,
          email: userData.email,
          name: userData.name,
          role: userData.role,
          department: userData.department,
          permissions: userData.permissions,
          avatar: userData.avatar,
          lastLogin: new Date().toISOString(),
        },
        token: access_token,
      };
    } catch (error) {
      // Fallback to mock data for demo
      if (email === 'admin@kmrl.co.in' && password === 'admin@123') {
        return {
          user: {
            id: '1',
            email: 'admin@kmrl.co.in',
            name: 'System Administrator',
            role: 'admin' as const,
            department: 'IT',
            permissions: ['read', 'write', 'delete', 'admin'],
            avatar: '/avatars/admin.jpg',
            lastLogin: new Date().toISOString(),
          },
          token: 'mock-jwt-token-admin',
        };
      } else if (email === 'engineer@kmrl.co.in' && password === 'engineer') {
        return {
          user: {
            id: '2',
            email: 'engineer@kmrl.co.in',
            name: 'Senior Engineer',
            role: 'engineer' as const,
            department: 'Engineering',
            permissions: ['read', 'write'],
            avatar: '/avatars/engineer.jpg',
            lastLogin: new Date().toISOString(),
          },
          token: 'mock-jwt-token-engineer',
        };
      }
      throw error instanceof Error ? error : new Error('Login failed');
    }
  }
);

export const logoutAsync = createAsyncThunk('auth/logout', async () => {
  localStorage.removeItem('kmrl_token');
  return null;
});

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    clearError: (state) => {
      state.error = null;
    },
    updateUser: (state, action: PayloadAction<Partial<User>>) => {
      if (state.user) {
        state.user = { ...state.user, ...action.payload };
      }
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload.user;
        state.token = action.payload.token;
        state.isAuthenticated = true;
        localStorage.setItem('kmrl_token', action.payload.token);
      })
      .addCase(loginAsync.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Login failed';
      })
      .addCase(logoutAsync.fulfilled, (state) => {
        state.user = null;
        state.token = null;
        state.isAuthenticated = false;
      });
  },
});

export const { clearError, updateUser } = authSlice.actions;
export default authSlice.reducer;